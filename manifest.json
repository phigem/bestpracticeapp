{
	"documentation": {
		"documentation1": "The descriptor for applications, components, and libraries is inspired by the Web Application Manifest concept introduced by the W3C. ",
		"documentation2": "The descriptor provides a central, machine-readable and easy-to-access location for storing metadata associated with an application, an application component, or a library",
		"start_url": "Start page of your app, if available"
	},
	"_version": "1.1.0",
	"start_url": "index.html",
	"sap.app": {
		"documentation": {
			"id": "The namespace of our application component",
			"type": "Defines what we want to configure, here: an application",
			"i18n": "Relative URL to the properties file that contains the text symbols for the descriptor; default: i18n/i18n.properties",
			"title": "Title of the application",
			"description": "Short description text what the application does",
			"applicationVersion": "The version of the application to be able to easily update the application later on",
			"tags": "Containing an array of language-dependent keywords to be specified via {{…}} syntax",
			"ach": "The application component hierarchy (this is an SAP-internal parameter to assign a support component to the application)",
			"dataSources": {
				"1": "Unique key/alias to specify the used data sources; contains the following information:",
				"2": "uri - mandatory relative URL in the component; takes embeddedBy into account, if filled, or the server absolute of the data source, for example /sap/opu/odata/snce/PO_S_SRV;v=2/",
				"3": "type - OData (default)|ODataAnnotation|INA|XML|JSON",
				"4": "settings - Data source type-specific attributes (key, value pairs), such as:",
				"4-odataVersion": "odataVersion - 2.0 (default), 4.0",
				"4-localUri": "Relative URL to local meta data document or annotation uri",
				"4-annotations": "Array of annotations which references an existing data source of type 'ODataAnnotation' under sap.app/dataSources"
			}
		},
		"_version": "1.1.0",
		"id": "de.ciber.bestpracticeapp",
		"type": "application",
		"i18n": "i18n/i18n.properties",
		"title": "{{APP_TITLE}}",
		"description": "{{APP_DESCRIPTION}}",
		"applicationVersion": {
			"version": "1.0.0"
		},
		"ach": "CA-UI5-DOC",
		"dataSources": {
			"northwindService": {
				"uri": "/destinations/NorthwindV3/V3/northwind/northwind.svc/",
				"type": "OData",
				"settings": {
					"odataVersion": "3.0"
				}
			},
			"resourceList": {
				"uri": "/model/ProductionResources.json",
				"type": "JSON"
			}
		}
	},
	"sap.ui": {
		"documentation": {
			"technology": "This value specifies the UI technology; in our case we use OpenUI5",
			"icons": "Contains object with app-specific icons, for example:\nicon – Icon of the app\nfavIcon – ICO file to be used inside the browser and for desktop shortcuts",
			"deviceTypes": "Tells what devices are supported by the app: desktop, tablet, phone (all true by default)",
			"supportedThemes": "An array containing a list of SAP themes supported by the app, for example sap_bluecrystal"
		},
		"_version": "1.1.0",
		"technology": "UI5",
		"deviceTypes": {
			"desktop": true,
			"tablet": true,
			"phone": true
		},
		"supportedThemes": [
         "sap_bluecrystal"
      ]
	},
	"sap.ui5": {
		"documentation": {
			"rootView": "If you specify this parameter, the component will automatically instantiate the view and use it as the root for this component",
			"dependencies": "Here we declare the UI libraries used in the application",
			"models": "Defines models that should be created or destroyed along the component's lifecycle. The key represents the model name. Use an empty string for the default model.\ntype - Model class name\nuri - Relative URL in the component; takes embeddedBy into account if filled, or server absolute for model\nsettings - Object that is passed to the model constructor\ndataSource - String of key/alias from sap.app dataSources to reference an existing data source",
			"resources": "Relative URLs in the component, taking embeddedBy into account if filled, to js (JavaScript) and css resources the app needs for specifying the uri and an id (optional) for CSS. The JavaScript files are loaded by the require mechanism. The CSS files are added to the head of the HTML page as a link tag. The resources are resolved relative to the location of the manifest.json file.",
			"config": "Static configuration; specify the name-value pairs that you need in your component.",
			"routing": "Provides configuration parameters for route and router."
		},
		"_version": "1.1.0",
		"rootView": "de.ciber.bestpracticeapp.view.RootApp",
		"dependencies": {
			"minUI5Version": "1.30",
			"libs": {
				"sap.m": {

				}
			}
		},
		"models": {
			"i18n": {
				"type": "sap.ui.model.resource.ResourceModel",
				"settings": {
					"bundleName": "de.ciber.bestpracticeapp.i18n.i18n"
				}
			},
			"northwind": {
				"dataSource": "northwindService"
			},
			"resource": {
				"dataSource": "resourceList"
			}
		},
		"resources": {
			"css": [
				{
					"uri": "css/style.css"
			}
		  ]
		},
		"routing": {
			"documentation": {
				"config": "This section contains the global router configuration and default values that apply for all routes and targets. We define the router class that we want to use and where our views are located in the app. To load and display views automatically, we also specify which control is used to display the pages and what aggregation should be filled when a new page is displayed.",
				"routes": "Each route defines a name, a pattern, and one or more targets to navigate to when the route has been hit. The pattern is basically the URL part that matches to the route, we define two routes for our app. The first one is a default route that will show the overview page with the content from the previous steps, and the second is the detail route with the URL pattern detail that will show a new page.",
				"targets": "A target defines a view that is displayed, it is associated with one or more routes and it can also be displayed manually from within the app. Whenever a target is displayed, the corresponding view is loaded and shown in the app. In our app we simply define two targets with a view name that corresponds to the target name. "
			},
			"config": {
				"routerClass": "sap.m.routing.Router",
				"viewType": "XML",
				"viewPath": "de.ciber.bestpracticeapp.view",
				"controlId": "idRootApp",
				"controlAggregation": "masterPages"
			},
			"routes": [
				{
					"pattern": "",
					"name": "resources",
					"target": "resources"
		}
	  ],
			"targets": {
				"resources": {
					"viewName": "ResourceList"
				}
			}
		}
	}
}